{"ast":null,"code":"import _regeneratorRuntime from \"D:/Dentrait/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Dentrait/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"D:/Dentrait/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Dentrait/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport axios from \"axios\";\nimport { ServerFailure } from \"../../domain/core/Failures\";\nexport var SpotifyApi = /*#__PURE__*/_createClass(function SpotifyApi() {\n  var _this = this;\n  _classCallCheck(this, SpotifyApi);\n  this.fetchSongs = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(listSize) {\n      var options, response;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // usually such options would be in environment variables\n            options = {\n              method: \"GET\",\n              url: \"https://shazam.p.rapidapi.com/charts/track\",\n              params: {\n                locale: \"en-US\",\n                pageSize: \"\".concat(listSize),\n                startFrom: \"0\"\n              },\n              headers: {\n                \"X-RapidAPI-Key\": \"c112b83e18msh06b2c9d44526d89p1c3bd2jsn2015a7c6493f\",\n                \"X-RapidAPI-Host\": \"shazam.p.rapidapi.com\"\n              }\n            };\n            _context.next = 4;\n            return axios.request(options);\n          case 4:\n            response = _context.sent;\n            if (!response.data) {\n              _context.next = 7;\n              break;\n            }\n            return _context.abrupt(\"return\", _this.extractSongData(response.data));\n          case 7:\n            return _context.abrupt(\"return\", new ServerFailure());\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", new ServerFailure());\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  this.extractSongData = function (data) {\n    var songList = [];\n    data.tracks.forEach(function (element) {\n      var _element$images;\n      var song = {\n        id: element.key,\n        title: element.title,\n        artist: element.subtitle,\n        album: \"\",\n        releaseDate: new Date(),\n        genre: \"\",\n        url: element.url,\n        coverArt: ((_element$images = element.images) === null || _element$images === void 0 ? void 0 : _element$images.coverarthq) || \"https://images.pexels.com/photos/6123509/pexels-photo-6123509.jpeg\"\n      };\n      songList.push(song);\n    });\n    console.log(songList);\n    return songList;\n  };\n});","map":{"version":3,"names":["axios","ServerFailure","SpotifyApi","_createClass","_this","_classCallCheck","fetchSongs","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","listSize","options","response","wrap","_callee$","_context","prev","next","method","url","params","locale","pageSize","concat","startFrom","headers","request","sent","data","abrupt","extractSongData","t0","stop","_x","apply","arguments","songList","tracks","forEach","element","_element$images","song","id","key","title","artist","subtitle","album","releaseDate","Date","genre","coverArt","images","coverarthq","push","console","log"],"sources":["D:/Dentrait/src/infrastructure/music/SpotifyApi.ts"],"sourcesContent":["import axios from \"axios\";\nimport { ServerFailure } from \"../../domain/core/Failures\";\nimport { IMusicFacade } from \"../../domain/music/IMusicFacade\";\nimport { Song } from \"../../domain/music/ValueObjects\";\n\ntype Images = {\n  background: string;\n  coverart: string;\n  coverarthq: string;\n  joecolor: string;\n};\n\ntype Track = {\n  layout: string;\n  type: string;\n  key: string;\n  title: string;\n  subtitle: string;\n  images: Images;\n  url: string;\n};\n\ntype SimplifiedApiData = {\n  tracks: Track[];\n};\n\nexport class SpotifyApi implements IMusicFacade {\n  fetchSongs = async (listSize: number) => {\n    try {\n      // usually such options would be in environment variables\n      const options = {\n        method: \"GET\",\n        url: \"https://shazam.p.rapidapi.com/charts/track\",\n        params: { locale: \"en-US\", pageSize: `${listSize}`, startFrom: \"0\" },\n        headers: {\n          \"X-RapidAPI-Key\":\n            \"c112b83e18msh06b2c9d44526d89p1c3bd2jsn2015a7c6493f\",\n          \"X-RapidAPI-Host\": \"shazam.p.rapidapi.com\"\n        }\n      };\n\n      const response = await axios.request(options);\n      if (response.data) {\n        return this.extractSongData(response.data as SimplifiedApiData);\n      }\n\n      return new ServerFailure();\n    } catch (error) {\n      return new ServerFailure();\n    }\n  };\n\n  extractSongData = (data: SimplifiedApiData): Song[] => {\n    const songList = [];\n    data.tracks.forEach((element) => {\n      const song: Song = {\n        id: element.key,\n        title: element.title,\n        artist: element.subtitle,\n        album: \"\",\n        releaseDate: new Date(),\n        genre: \"\",\n        url: element.url,\n        coverArt:\n          element.images?.coverarthq ||\n          \"https://images.pexels.com/photos/6123509/pexels-photo-6123509.jpeg\"\n      };\n\n      songList.push(song);\n    });\n\n    console.log(songList);\n    return songList;\n  };\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,4BAA4B;AAyB1D,WAAaC,UAAU,gBAAAC,YAAA,UAAAD,WAAA;EAAA,IAAAE,KAAA;EAAAC,eAAA,OAAAH,UAAA;EAAA,KACrBI,UAAU;IAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,QAAgB;MAAA,IAAAC,OAAA,EAAAC,QAAA;MAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAC,IAAA;YAEhC;YACML,OAAO,GAAG;cACdO,MAAM,EAAE,KAAK;cACbC,GAAG,EAAE,4CAA4C;cACjDC,MAAM,EAAE;gBAAEC,MAAM,EAAE,OAAO;gBAAEC,QAAQ,KAAAC,MAAA,CAAKb,QAAQ,CAAE;gBAAEc,SAAS,EAAE;cAAI,CAAC;cACpEC,OAAO,EAAE;gBACP,gBAAgB,EACd,oDAAoD;gBACtD,iBAAiB,EAAE;cACrB;YACF,CAAC;YAAAV,QAAA,CAAAE,IAAA;YAAA,OAEsBnB,KAAK,CAAC4B,OAAO,CAACf,OAAO,CAAC;UAAA;YAAvCC,QAAQ,GAAAG,QAAA,CAAAY,IAAA;YAAA,KACVf,QAAQ,CAACgB,IAAI;cAAAb,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,OAAAF,QAAA,CAAAc,MAAA,WACR3B,KAAI,CAAC4B,eAAe,CAAClB,QAAQ,CAACgB,IAAI,CAAsB;UAAA;YAAA,OAAAb,QAAA,CAAAc,MAAA,WAG1D,IAAI9B,aAAa,EAAE;UAAA;YAAAgB,QAAA,CAAAC,IAAA;YAAAD,QAAA,CAAAgB,EAAA,GAAAhB,QAAA;YAAA,OAAAA,QAAA,CAAAc,MAAA,WAEnB,IAAI9B,aAAa,EAAE;UAAA;UAAA;YAAA,OAAAgB,QAAA,CAAAiB,IAAA;QAAA;MAAA,GAAAvB,OAAA;IAAA,CAE7B;IAAA,iBAAAwB,EAAA;MAAA,OAAA5B,IAAA,CAAA6B,KAAA,OAAAC,SAAA;IAAA;EAAA;EAAA,KAEDL,eAAe,GAAG,UAACF,IAAuB,EAAa;IACrD,IAAMQ,QAAQ,GAAG,EAAE;IACnBR,IAAI,CAACS,MAAM,CAACC,OAAO,CAAC,UAACC,OAAO,EAAK;MAAA,IAAAC,eAAA;MAC/B,IAAMC,IAAU,GAAG;QACjBC,EAAE,EAAEH,OAAO,CAACI,GAAG;QACfC,KAAK,EAAEL,OAAO,CAACK,KAAK;QACpBC,MAAM,EAAEN,OAAO,CAACO,QAAQ;QACxBC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,IAAIC,IAAI,EAAE;QACvBC,KAAK,EAAE,EAAE;QACT/B,GAAG,EAAEoB,OAAO,CAACpB,GAAG;QAChBgC,QAAQ,EACN,EAAAX,eAAA,GAAAD,OAAO,CAACa,MAAM,cAAAZ,eAAA,uBAAdA,eAAA,CAAgBa,UAAU,KAC1B;MACJ,CAAC;MAEDjB,QAAQ,CAACkB,IAAI,CAACb,IAAI,CAAC;IACrB,CAAC,CAAC;IAEFc,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC;IACrB,OAAOA,QAAQ;EACjB,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}