{"ast":null,"code":"import _createClass from \"D:/Dentrait/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Dentrait/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { FAVOURITE_PLAYLIST_ID } from \"../constants/constants\";\nimport { CREATE_PLAYLIST, DELETE_PLAYLIST, SET_SONGS_LIST, MAKE_FAVOURITE, REMOVE_FAVOURITE, RESET_SEARCH_FILTER, SET_ERROR_STATE, SET_LOADING_STATE, SET_SEARCH_FILTER, TOGGLE_FAVOURITE, UPDATE_SEARCH_TERM } from \"./Actions\";\nimport { initialState } from \"./MusicStore\";\nexport var MusicAppReducer = /*#__PURE__*/_createClass(function MusicAppReducer() {\n  var _this = this;\n  _classCallCheck(this, MusicAppReducer);\n  this.reducer = function () {\n    return createReducer(initialState, function (builder) {\n      builder.addCase(SET_SONGS_LIST, _this.setSongsList);\n      builder.addCase(MAKE_FAVOURITE, _this.makeFavourite);\n      builder.addCase(SET_SEARCH_FILTER, _this.setSearchFilter);\n      builder.addCase(RESET_SEARCH_FILTER, _this.resetSearchFilter);\n      builder.addCase(REMOVE_FAVOURITE, _this.removeFavourite);\n      builder.addCase(TOGGLE_FAVOURITE, _this.toggleFavourite);\n      builder.addCase(CREATE_PLAYLIST, _this.createPlaylist);\n      builder.addCase(DELETE_PLAYLIST, _this.deletePlaylist);\n      builder.addCase(UPDATE_SEARCH_TERM, _this.updateSearchTerm);\n      builder.addCase(SET_LOADING_STATE, _this.setLoadingState);\n      builder.addCase(SET_ERROR_STATE, _this.updateErrorState);\n    });\n  };\n  this.setSongsList = function (state, action) {\n    state.songsList = action.payload;\n  };\n  this.makeFavourite = function (state, action) {\n    var songId = action.payload;\n    var favouritePlaylist = state.playLists.find(function (pl) {\n      return pl.id === FAVOURITE_PLAYLIST_ID;\n    });\n    if (favouritePlaylist && !favouritePlaylist.songs.includes(songId)) {\n      favouritePlaylist.songs.push(songId);\n    }\n  };\n  this.setSearchFilter = function (state, action) {\n    state.activeFilters.push(action.payload);\n  };\n  this.resetSearchFilter = function (state) {\n    state.activeFilters = [];\n  };\n  this.removeFavourite = function (state, action) {\n    var songId = action.payload;\n    var favouritePlaylist = state.playLists.find(function (pl) {\n      return pl.id === FAVOURITE_PLAYLIST_ID;\n    });\n    if (favouritePlaylist) {\n      favouritePlaylist.songs = favouritePlaylist.songs.filter(function (id) {\n        return id !== songId;\n      });\n    }\n  };\n  this.toggleFavourite = function (state, action) {\n    var songId = action.payload;\n    var favouritePlaylist = state.playLists.find(function (pl) {\n      return pl.id === FAVOURITE_PLAYLIST_ID;\n    });\n    if (favouritePlaylist) {\n      if (favouritePlaylist.songs.includes(songId)) {\n        favouritePlaylist.songs = favouritePlaylist.songs.filter(function (id) {\n          return id !== songId;\n        });\n      } else {\n        favouritePlaylist.songs.push(songId);\n      }\n    }\n  };\n  this.createPlaylist = function (state, action) {\n    var playlist = action.payload;\n    if (playlist.id !== FAVOURITE_PLAYLIST_ID) {\n      state.playLists.push(playlist);\n    }\n  };\n  this.deletePlaylist = function (state, action) {\n    var playlistId = action.payload;\n    if (playlistId !== FAVOURITE_PLAYLIST_ID) {\n      state.playLists = state.playLists.filter(function (pl) {\n        return pl.id !== playlistId;\n      });\n    }\n  };\n  this.updateSearchTerm = function (state, action) {\n    state.searchTerm = action.payload;\n  };\n  this.setLoadingState = function (state, action) {\n    state.isLoading = action.payload;\n  };\n  this.updateErrorState = function (state, action) {\n    state.isError = action.payload;\n  };\n});","map":{"version":3,"names":["createReducer","FAVOURITE_PLAYLIST_ID","CREATE_PLAYLIST","DELETE_PLAYLIST","SET_SONGS_LIST","MAKE_FAVOURITE","REMOVE_FAVOURITE","RESET_SEARCH_FILTER","SET_ERROR_STATE","SET_LOADING_STATE","SET_SEARCH_FILTER","TOGGLE_FAVOURITE","UPDATE_SEARCH_TERM","initialState","MusicAppReducer","_createClass","_this","_classCallCheck","reducer","builder","addCase","setSongsList","makeFavourite","setSearchFilter","resetSearchFilter","removeFavourite","toggleFavourite","createPlaylist","deletePlaylist","updateSearchTerm","setLoadingState","updateErrorState","state","action","songsList","payload","songId","favouritePlaylist","playLists","find","pl","id","songs","includes","push","activeFilters","filter","playlist","playlistId","searchTerm","isLoading","isError"],"sources":["D:/Dentrait/src/application/music/redux/Reducers.ts"],"sourcesContent":["import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { PlayList, Song } from \"../../../domain/music/ValueObjects\";\nimport { FAVOURITE_PLAYLIST_ID } from \"../constants/constants\";\nimport {\n  CREATE_PLAYLIST,\n  DELETE_PLAYLIST,\n  SET_SONGS_LIST,\n  MAKE_FAVOURITE,\n  REMOVE_FAVOURITE,\n  RESET_SEARCH_FILTER,\n  SET_ERROR_STATE,\n  SET_LOADING_STATE,\n  SET_SEARCH_FILTER,\n  TOGGLE_FAVOURITE,\n  UPDATE_SEARCH_TERM\n} from \"./Actions\";\nimport { Filters, initialState, MusicAppState } from \"./MusicStore\";\n\nexport class MusicAppReducer {\n  reducer = () => {\n    return createReducer(initialState, (builder) => {\n      builder.addCase(SET_SONGS_LIST, this.setSongsList);\n      builder.addCase(MAKE_FAVOURITE, this.makeFavourite);\n      builder.addCase(SET_SEARCH_FILTER, this.setSearchFilter);\n      builder.addCase(RESET_SEARCH_FILTER, this.resetSearchFilter);\n      builder.addCase(REMOVE_FAVOURITE, this.removeFavourite);\n      builder.addCase(TOGGLE_FAVOURITE, this.toggleFavourite);\n      builder.addCase(CREATE_PLAYLIST, this.createPlaylist);\n      builder.addCase(DELETE_PLAYLIST, this.deletePlaylist);\n      builder.addCase(UPDATE_SEARCH_TERM, this.updateSearchTerm);\n      builder.addCase(SET_LOADING_STATE, this.setLoadingState);\n      builder.addCase(SET_ERROR_STATE, this.updateErrorState);\n    });\n  };\n\n  setSongsList = (state: MusicAppState, action: PayloadAction<Song[]>) => {\n    state.songsList = action.payload;\n  };\n\n  makeFavourite = (state: MusicAppState, action: PayloadAction<string>) => {\n    const songId = action.payload;\n    const favouritePlaylist = state.playLists.find(\n      (pl) => pl.id === FAVOURITE_PLAYLIST_ID\n    );\n    if (favouritePlaylist && !favouritePlaylist.songs.includes(songId)) {\n      favouritePlaylist.songs.push(songId);\n    }\n  };\n\n  setSearchFilter = (state: MusicAppState, action: PayloadAction<Filters>) => {\n    state.activeFilters.push(action.payload);\n  };\n\n  resetSearchFilter = (state: MusicAppState) => {\n    state.activeFilters = [];\n  };\n\n  removeFavourite = (state: MusicAppState, action: PayloadAction<string>) => {\n    const songId = action.payload;\n    const favouritePlaylist = state.playLists.find(\n      (pl) => pl.id === FAVOURITE_PLAYLIST_ID\n    );\n    if (favouritePlaylist) {\n      favouritePlaylist.songs = favouritePlaylist.songs.filter(\n        (id) => id !== songId\n      );\n    }\n  };\n\n  toggleFavourite = (state: MusicAppState, action: PayloadAction<string>) => {\n    const songId = action.payload;\n    const favouritePlaylist = state.playLists.find(\n      (pl) => pl.id === FAVOURITE_PLAYLIST_ID\n    );\n    if (favouritePlaylist) {\n      if (favouritePlaylist.songs.includes(songId)) {\n        favouritePlaylist.songs = favouritePlaylist.songs.filter(\n          (id) => id !== songId\n        );\n      } else {\n        favouritePlaylist.songs.push(songId);\n      }\n    }\n  };\n\n  createPlaylist = (state: MusicAppState, action: PayloadAction<PlayList>) => {\n    const playlist = action.payload;\n    if (playlist.id !== FAVOURITE_PLAYLIST_ID) {\n      state.playLists.push(playlist);\n    }\n  };\n\n  deletePlaylist = (state: MusicAppState, action: PayloadAction<string>) => {\n    const playlistId = action.payload;\n    if (playlistId !== FAVOURITE_PLAYLIST_ID) {\n      state.playLists = state.playLists.filter((pl) => pl.id !== playlistId);\n    }\n  };\n\n  updateSearchTerm = (state: MusicAppState, action: PayloadAction<string>) => {\n    state.searchTerm = action.payload;\n  };\n\n  setLoadingState = (state: MusicAppState, action: PayloadAction<boolean>) => {\n    state.isLoading = action.payload;\n  };\n\n  updateErrorState = (state: MusicAppState, action: PayloadAction<boolean>) => {\n    state.isError = action.payload;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}